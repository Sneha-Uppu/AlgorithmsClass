import java.util.Arrays;
import java.util.Comparator;

public class ClosestPairOfPoints {
    public static void main(String[] args) {
        int n = 100000; 
        Point[] points = generateRandomPoints(n);
        long startTime = System.nanoTime();
        double minDist = closestPair(points);
        long endTime = System.nanoTime();
        System.out.printf("Number of points: "+n+", Minimum Distance between the points: "+minDist+"\n Time taken: "+(endTime - startTime));
    }

    static class Point {
        double x, y;
        Point(double x, double y) {
            this.x = x;
            this.y = y;
        }
    }

    public static Point[] generateRandomPoints(int n) {
        Point[] p = new Point[n];
        for (int i = 0; i < n; i++) {
            p[i] = new Point(Math.random(), Math.random());
        }
        return p;
    }

    public static double closestPair(Point[] points) {
        Point[] ptx = points.clone();
        Point[] pty = points.clone();
        Arrays.sort(ptx, Comparator.comparingDouble(p -> p.x));
        Arrays.sort(pty, Comparator.comparingDouble(p -> p.y));
        return closestPair(ptx, pty, 0, points.length - 1);
    }

    private static double closestPair(Point[] ptx, Point[] pty, int left, int right) {
        if (right - left <= 3) {
            return closestPoints(ptx, left, right);
        }

        int mid = (left + right) / 2;
        Point midPoint = ptx[mid];

        Point[] ptyleft = new Point[mid - left + 1];
        Point[] ptyright = new Point[right - mid];
        int li = 0, ri = 0;
        for (int i = 0; i < pty.length; i++) {
            if (pty[i].x <= midPoint.x) {
                ptyleft[li++] = pty[i];
            } else {
                ptyright[ri++] = pty[i];
            }
        }

        double dleft = closestPair(ptx, ptyleft, left, mid);
        double dright = closestPair(ptx, ptyright, mid + 1, right);
        double dist = Math.min(dleft, dright);

        Point[] p = new Point[right - left + 1];
        int j = 0;
        for (int i = 0; i < pty.length; i++) {
            if (Math.abs(pty[i].x - midPoint.x) < dist) {
                p[j++] = pty[i];
            }
        }

        return Math.min(dist, merge(p, j, dist));
    }

    private static double closestPoints(Point[] points, int left, int right) {
        double minDist = Double.MAX_VALUE;
        for (int i = left; i <= right; i++) {
            for (int j = i + 1; j <= right; j++) {
                double dist = distance(points[i], points[j]);
                if (dist < minDist) {
                    minDist = dist;
                }
            }
        }
        return minDist;
    }

    private static double merge(Point[] p, int size, double d) {
        double minDist = d;
        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size && (p[j].y - p[i].y) < minDist; j++) {
                double dist = distance(p[i], p[j]);
                if (dist < minDist) {
                    minDist = dist;
                }
            }
        }
        return minDist;
    }

    private static double distance(Point p1, Point p2) {
        return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
    }
}
